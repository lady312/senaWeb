{"version":3,"file":"toast.component.d.ts","sources":["toast.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, EventEmitter, OnDestroy, OnInit } from '@angular/core';\r\nimport { SnotifyService } from '../../services/snotify.service';\r\nimport { SnotifyToast } from '../../models/snotify-toast.model';\r\nimport { Subscription } from 'rxjs';\r\nimport { SnotifyEvent } from '../../types/event.type';\r\nimport { SnotifyStyle } from '../../enums/snotify-style.enum';\r\nexport declare class ToastComponent implements OnInit, OnDestroy, AfterContentInit {\r\n    private service;\r\n    /**\r\n     * Get toast from notifications array\r\n     */\r\n    toast: SnotifyToast;\r\n    stateChanged: EventEmitter<SnotifyEvent>;\r\n    toastDeletedSubscription: Subscription;\r\n    toastChangedSubscription: Subscription;\r\n    /**\r\n     * requestAnimationFrame id\r\n     */\r\n    animationFrame: number;\r\n    /**\r\n     * Toast state\r\n     */\r\n    state: {\r\n        paused: boolean;\r\n        progress: number;\r\n        animation: string;\r\n        isDestroying: boolean;\r\n        promptType: SnotifyStyle;\r\n    };\r\n    constructor(service: SnotifyService);\r\n    /**\r\n     * Init base options. Subscribe to toast changed, toast deleted\r\n     */\r\n    ngOnInit(): void;\r\n    ngAfterContentInit(): void;\r\n    /**\r\n     * Unsubscribe subscriptions\r\n     */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Trigger OnClick lifecycle\r\n     */\r\n    onClick(): void;\r\n    /**\r\n     * Trigger beforeDestroy lifecycle. Removes toast\r\n     */\r\n    onRemove(): void;\r\n    /**\r\n     * Trigger onHoverEnter lifecycle\r\n     */\r\n    onMouseEnter(): void;\r\n    /**\r\n     * Trigger onHoverLeave lifecycle\r\n     */\r\n    onMouseLeave(): void;\r\n    /**\r\n     * Remove toast completely after animation\r\n     */\r\n    onExitTransitionEnd(): void;\r\n    /**\r\n     * Initialize base toast config\r\n     *\r\n     */\r\n    initToast(): void;\r\n    /**\r\n     * Start progress bar\r\n     * @param startTime number\r\n     */\r\n    startTimeout(startTime?: number): void;\r\n}\r\n"]}